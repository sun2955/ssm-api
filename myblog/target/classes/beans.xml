<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xsi:schemaLocation="http://www.springframework.org/schema/beans 
                http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                http://www.springframework.org/schema/context 
                http://www.springframework.org/schema/context/spring-context-2.5.xsd
                http://www.springframework.org/schema/tx 
                http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">


	<!--将针对注解的处理器配置好 -->
	<context:annotation-config />
	<!-- 扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入 -->
	<context:component-scan base-package="com.sun.service" />
	

    <!--配置数据源属性文件  -->
     <bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>/WEB-INF/configs/sqlServer.properties</value>
        </property>
    </bean> 
     
	<!-- 配置数据源	  -->
 	 <bean id="dataSource"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
   		<property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.pwd}"></property>
        <!-- 初始化连接大小 -->  
       <!--  <property name="initialSize" value="${jdbc.initialSize}"></property>  
        连接池最大数量  
        <property name="maxActive" value="${jdbc.maxActive}"></property>  
        连接池最大空闲  
        <property name="maxIdle" value="${jdbc.maxIdle}"></property>  
        连接池最小空闲  
        <property name="minIdle" value="${jdbc.minIdle}"></property>  
        获取连接最大等待时间  
        <property name="maxWait" value="${jdbc.maxWait}"></property> -->
        
        
    </bean> 
    
  <!--   配置sessoin工厂 -->
     <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <!-- <property name="configLocation" value="classpath:mybatis.xml" />   -->
        <!--<mappers>
        	<mapper resource="com/test/sqlMapper/loginMapper.xml"/>
        </mappers>   这里动态的加载  xml文件，就不用手动在 :mybatis.xml 里面写了这里加载的时候是作为session工厂一起进行加载 -->
        <property name="dataSource" ref="dataSource" />  
        <property name="mapperLocations" value="classpath*:mapper/*Mapper.xml" /> 
    </bean>  
    
<!--     <bean id="iLoginDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
            用上面直接指定接口位置
         <property name="mapperInterface" value="com.sun.dao.ILoginDao"/> 
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>  -->
    
    
    <!--配置扫描器-->
     <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描com.sun.dao这个包以及它的子包下的所有映射接口类-->
        <property name="basePackage" value="com.sun.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean> 
     
    
<!-- 		 配置Jdbc模板 
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
		p:dataSource-ref="dataSource" /> -->
		
		
	<!--	 配置事务管理器 ，如果你暂时未使用到事务可以不配置，次以下内容均可以在不适用事务的情况下删除 -->
 	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	 <!-- 开启事务行为 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
    
	<!--  	 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务
		
	<aop:config proxy-target-class="true">
		<aop:aspect id="aspect" ref="aspect">
			<aop:pointcut id="serviceMethod" expression=" execution(* com.sun.service..*(..))" />
		</aop:aspect>
	</aop:config>-->
	
<!-- 	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>  -->



<!-- 	<bean id="userService" class="com.sun.service.UserService">
		<property name="name">
			<value>sunxin</value>
		</property>
	</bean> -->
 
 
</beans>